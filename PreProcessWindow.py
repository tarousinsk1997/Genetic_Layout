# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\tarou\Documents\Pycharm Projects\Genetic_Layout\PreProcessWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import course
from PyQt5.QtWidgets import QTableWidgetItem, QMessageBox
from PyQt5.QtCore import Qt, QSignalMapper


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_PreProcessWindow(object):
    def setupUi(self, PreProcessWindow):
        PreProcessWindow.setObjectName("PreProcessWindow")
        PreProcessWindow.resize(1083, 857)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(PreProcessWindow)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.ExcelImportBtn = QtWidgets.QPushButton(PreProcessWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ExcelImportBtn.sizePolicy().hasHeightForWidth())
        self.ExcelImportBtn.setSizePolicy(sizePolicy)
        self.ExcelImportBtn.setObjectName("ExcelImportBtn")
        self.gridLayout.addWidget(self.ExcelImportBtn, 0, 0, 1, 1)
        self.checkBox_spaceedit = QtWidgets.QCheckBox(PreProcessWindow)
        self.checkBox_spaceedit.setObjectName("checkBox_spaceedit")
        self.gridLayout.addWidget(self.checkBox_spaceedit, 0, 1, 1, 1)
        self.PreExitBtn = QtWidgets.QPushButton(PreProcessWindow)
        self.PreExitBtn.setObjectName("PreExitBtn")
        self.gridLayout.addWidget(self.PreExitBtn, 1, 1, 1, 1)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.radioVoid = QtWidgets.QRadioButton(PreProcessWindow)
        self.radioVoid.setObjectName("radioVoid")
        self.verticalLayout.addWidget(self.radioVoid)
        self.radioRoad = QtWidgets.QRadioButton(PreProcessWindow)
        self.radioRoad.setObjectName("radioRoad")
        self.verticalLayout.addWidget(self.radioRoad)
        self.radioSubArea = QtWidgets.QRadioButton(PreProcessWindow)
        self.radioSubArea.setObjectName("radioSubArea")
        self.verticalLayout.addWidget(self.radioSubArea)
        self.gridLayout.addLayout(self.verticalLayout, 1, 0, 1, 1)
        self.horizontalLayout_2.addLayout(self.gridLayout)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem)
        self.verticalLayout_2.addLayout(self.horizontalLayout_2)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_2.addItem(spacerItem1)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_2 = QtWidgets.QLabel(PreProcessWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setMaximumSize(QtCore.QSize(16777215, 20))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout.addWidget(self.label_2)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.gridLayout_3 = QtWidgets.QGridLayout()
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.SiteAreaLabel = QtWidgets.QLabel(PreProcessWindow)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.SiteAreaLabel.setFont(font)
        self.SiteAreaLabel.setObjectName("SiteAreaLabel")
        self.gridLayout_3.addWidget(self.SiteAreaLabel, 1, 0, 1, 1)
        self.FCLAreaLabel = QtWidgets.QLabel(PreProcessWindow)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.FCLAreaLabel.setFont(font)
        self.FCLAreaLabel.setObjectName("FCLAreaLabel")
        self.gridLayout_3.addWidget(self.FCLAreaLabel, 0, 0, 1, 1)
        self.FCL_Var_label = QtWidgets.QLabel(PreProcessWindow)
        self.FCL_Var_label.setAlignment(QtCore.Qt.AlignCenter)
        self.FCL_Var_label.setObjectName("FCL_Var_label")
        self.gridLayout_3.addWidget(self.FCL_Var_label, 0, 1, 1, 1)
        self.SiteAreaLabel_2 = QtWidgets.QLabel(PreProcessWindow)
        self.SiteAreaLabel_2.setAlignment(QtCore.Qt.AlignCenter)
        self.SiteAreaLabel_2.setObjectName("SiteAreaLabel_2")
        self.gridLayout_3.addWidget(self.SiteAreaLabel_2, 1, 1, 1, 1)
        self.verticalLayout_4.addLayout(self.gridLayout_3)
        self.horizontalLayout.addLayout(self.verticalLayout_4)
        self.verticalLayout_2.addLayout(self.horizontalLayout)
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.Areas_Table = QtWidgets.QTableWidget(PreProcessWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Areas_Table.sizePolicy().hasHeightForWidth())
        self.Areas_Table.setSizePolicy(sizePolicy)
        self.Areas_Table.setMinimumSize(QtCore.QSize(400, 400))
        self.Areas_Table.setObjectName("Areas_Table")
        self.Areas_Table.setColumnCount(0)
        self.Areas_Table.setRowCount(0)
        self.gridLayout_2.addWidget(self.Areas_Table, 1, 1, 1, 1)
        self.label_3 = QtWidgets.QLabel(PreProcessWindow)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.gridLayout_2.addWidget(self.label_3, 0, 0, 1, 1)
        self.SIte_Table = QtWidgets.QTableWidget(PreProcessWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.SIte_Table.sizePolicy().hasHeightForWidth())
        self.SIte_Table.setSizePolicy(sizePolicy)
        self.SIte_Table.setMinimumSize(QtCore.QSize(400, 400))
        self.SIte_Table.setObjectName("SIte_Table")
        self.SIte_Table.setColumnCount(0)
        self.SIte_Table.setRowCount(0)
        self.gridLayout_2.addWidget(self.SIte_Table, 1, 0, 1, 1)
        self.label_4 = QtWidgets.QLabel(PreProcessWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())
        self.label_4.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.gridLayout_2.addWidget(self.label_4, 0, 1, 1, 1)
        self.verticalLayout_2.addLayout(self.gridLayout_2)

        self.retranslateUi(PreProcessWindow)
        QtCore.QMetaObject.connectSlotsByName(PreProcessWindow)

        '''
                                                  МОЙ БЛОК НИЖЕ КОПИРОВАТЬ ПЕРЕД executesecond.bat 
                                                  '''
        self.PreExitBtn.setEnabled(False)
        self.ExcelImportBtn.clicked.connect(self.xlsx_open_dialog)
        self.checkBox_spaceedit.isChecked()
        self.PreExitBtn.clicked.connect(self.linkAreaExit)
        # self.SIte_Table.clicked.connect(self.refresh_combobox)
        # self.SIte_Table.cellPressed.connect(self.refresh_combobox)
        self.Areas_Table.cellPressed.connect(self.deleteRow)
        self.SIte_Table.setMouseTracking(True)

        # self.PreExitBtn.clicked.connect(self.)

        # Хранение данных
        self.rect_edit = {}
        self.linklist = []
        self.Passedchecks = False
        self.FCL_rect = ''
        self.signalmapper = QSignalMapper
        self.FCL_Ref = None

    def xlsx_open_dialog(self):
        fname = QtWidgets.QFileDialog.getOpenFileName()
        if not fname[0] == '':
            self.FCL_Ref = self.generate_initial(fname[0])
            self.pastexlsxTable()
        self.PreExitBtn.setEnabled(True)

    def pastexlsxTable(self):
        sumsquare = 0
        self.SIte_Table.setColumnCount(3)  # Устанавливаем три колонки
        self.SIte_Table.setRowCount(len(self.FCL_Ref.Site_list))  # и одну строку в таблице

        # Устанавливаем заголовки таблицы
        self.SIte_Table.setHorizontalHeaderLabels(["Название", "Площадь", 'Принадлежность'])

        # Устанавливаем всплывающие подсказки на заголовки
        # self.SIte_Table.horizontalHeaderItem(0).setToolTip("Column 1 ")
        # self.SIte_Table.horizontalHeaderItem(1).setToolTip("Column 2 ")
        # self.SIte_Table.horizontalHeaderItem(2).setToolTip("Column 3 ")

        # Устанавливаем выравнивание на заголовки
        self.SIte_Table.horizontalHeaderItem(0).setTextAlignment(Qt.AlignCenter)
        self.SIte_Table.horizontalHeaderItem(1).setTextAlignment(Qt.AlignCenter)
        self.SIte_Table.horizontalHeaderItem(2).setTextAlignment(Qt.AlignCenter)

        # заполняем первую строку
        for i in range(len(self.FCL_Ref.Site_list)):
            self.SIte_Table.setItem(i, 0, QTableWidgetItem(str(self.FCL_Ref.area_sitenamelist[i])))
            self.SIte_Table.setItem(i, 1, QTableWidgetItem(str(self.FCL_Ref.area_sitespacelist[i])))
            sumsquare += self.FCL_Ref.area_sitespacelist[i]
            combo = QtWidgets.QComboBox()
            combo.addItem('Default')
            self.SIte_Table.setCellWidget(i, 2, combo)

        # делаем ресайз колонок по содержимому
        self.SIte_Table.resizeColumnsToContents()
        self.refresh_combobox()
        self.FCL_Var_label.setText(f'{self.FCL_Ref.fcl.width() * self.FCL_Ref.fcl.height()}')
        self.SiteAreaLabel_2.setText(f'{sumsquare}')

    def pastAreaTable(self, widget, info, cols=3, rows=10):  # не доделано заполнение
        widget.setColumnCount(cols)  # Устанавливаем три колонки
        widget.setRowCount(rows)  # и одну строку в таблице
        widget.setHorizontalHeaderLabels(["Название", "Площадь", 'Тип пространства'])

        widget.horizontalHeaderItem(0).setTextAlignment(Qt.AlignCenter)
        widget.horizontalHeaderItem(1).setTextAlignment(Qt.AlignCenter)
        widget.horizontalHeaderItem(2).setTextAlignment(Qt.AlignCenter)

        for i in range(len(info)):
            widget.setItem(i, 0, QTableWidgetItem(str(info[f'{i}'][1])))
            width = info[f'{i}'][0].width()
            height = info[f'{i}'][0].height()
            S = round(abs(width * height), 2)
            widget.setItem(i, 1, QTableWidgetItem(str(S)))
            widget.setItem(i, 2, QTableWidgetItem(str(info[f'{i}'][2])))

            widget.resizeColumnsToContents()

        # def completePre(self):
        #     pass

    def deleteRow(self, row):
        self.Areas_Table.removeRow(row)
        del self.rect_edit[f'{row}']

    def linkAreaExit(self):
        linklist = []
        qrect = ''
        counter = 0
        x, y, w, h = 0, 0, 0, 0
        for i in range(self.SIte_Table.rowCount()):
            if len(self.rect_edit) != 0:
                for j in range(len(self.rect_edit)):
                    if self.rect_edit[f'{j}'][1] == self.SIte_Table.cellWidget(i, 2).currentText():
                        qrect = self.rect_edit[f'{j}'][0]
                        x, y, w, h = qrect.x(), qrect.y(), qrect.width(), qrect.height()
                        x, y, w, h = change_coord(x, y, w, h)
                        counter += 1
                if counter != 0:
                    linklist.append(course.SubArea(x, y, w, h, self.SIte_Table.cellWidget(i, 2).currentText()))
                    counter = 0
                else:
                    linklist.append(self.FCL_Ref.fcl)
            else:
                linklist.append(self.FCL_Ref.fcl)

        self.Passedchecks = self.enough_space()
        self.linklist = linklist

    def refresh_combobox(self):
        if self.Areas_Table.rowCount() != 0:
            for j in range(self.SIte_Table.rowCount()):
                self.SIte_Table.cellWidget(j, 2).clear()
                self.SIte_Table.cellWidget(j, 2).addItem('Default')
                for i in range(self.Areas_Table.rowCount()):
                    if self.Areas_Table.item(i, 2).text() == "Подпространство":
                        self.SIte_Table.cellWidget(j, 2).addItem(self.Areas_Table.item(i, 0).text())

    def generate_initial(self, path):
        individ = course.Individual()
        individ.excelparser(path)
        individ.createSites()
        return individ

    def enough_space(self):
        Square1 = self.FCL_Ref.fcl.width() * self.FCL_Ref.fcl.height()
        squaresumSites = 0  # cсуммарная площадь участков
        passed = False
        counter = 0
        mbox = QMessageBox()
        for i in range(len(self.FCL_Ref.area_sitespacelist)):
            squaresumSites += self.FCL_Ref.area_sitespacelist[i]
        SquareVoid = 0  # площади войд и дорог

        # if self.Areas_Table.rowCount() != 0:
        #     for i in range(self.SIte_Table.rowCount()): # проверка что участки вмещаются в подпространство
        #         for j in range(self.Areas_Table.rowCount()):
        #             if self.SIte_Table.cellWidget(i,2).currentText() == self.Areas_Table.item(j,0).text():
        #                 if float(self.SIte_Table.item(i, 1).text()) > float(self.Areas_Table.item(j,1).text()):
        #                     mbox.setText(f'{self.SIte_Table.item(i,0).text()} не вмещается в подпространство {self.SIte_Table.cellWidget(i,2).currentText()}')
        #                     mbox.show()
        #                     counter += 1

        if self.Areas_Table.rowCount() != 0:  # проверка что все участки вмещаются в пространство
            for i in range(self.Areas_Table.rowCount()):
                if self.Areas_Table.item(i, 2).text() == "Пустота" or self.Areas_Table.item(i, 2).text() == "Дорога":
                    SquareVoid += float(self.SIte_Table.item(i, 1).text())
        # print(f'{Square1}, {squaresumSites}, {SquareVoid}')
        if squaresumSites > Square1 - SquareVoid:
            mbox.setText('Не хватает площади для размещения участков')
            mbox.exec_()
            passed1 = False

    def intercept_criteria(self):  # здесь определяем, что прямоугольники внутри Sub_Area
        intercept = 0
        if self.Areas_Table.rowCount() != 0:
            for i in range(self.Areas_Table.rowCount()):
                for j in range(self.Areas_Table.rowCount()):
                    if i != j:
                        x1 = self.rect_edit[f'{j}'][0].x()
                        y1 = self.rect_edit[f'{j}'][0].y()
                        width1 = self.rect_edit[f'{j}'][0].width()
                        height1 = self.rect_edit[f'{j}'][0].height()
                        x1, y1, width1, height1 = change_coord(x1, y1, width1, height1)
                        x2 = x1 + width1
                        y2 = y1 + height1

                        x3 = self.rect_edit[f'{i}'][0].x()
                        y3 = self.rect_edit[f'{i}'][0].x()
                        width = self.rect_edit[f'{i}'][0].width()
                        height = self.rect_edit[f'{i}'][0].height()
                        x3, y3, width, height = change_coord(x3, y3, width, height)

                        x4 = x3 + width
                        y4 = y3 + height

                        left = max(x1, x3)
                        top = min(y2, y4)
                        right = min(x2, x4)
                        bottom = max(y1, y3)
                        width = right - left
                        height = top - bottom
                        if (width < 0 or height < 0):
                            intercept += width * height

        return intercept

    def retranslateUi(self, PreProcessWindow):
        _translate = QtCore.QCoreApplication.translate
        PreProcessWindow.setWindowTitle(_translate("PreProcessWindow", "Form"))
        self.ExcelImportBtn.setText(_translate("PreProcessWindow", "Импорт данных из Excel"))
        self.checkBox_spaceedit.setText(_translate("PreProcessWindow", "Режим добавления геометрии"))
        self.PreExitBtn.setText(_translate("PreProcessWindow", "Завершение"))
        self.radioVoid.setText(_translate("PreProcessWindow", "Задание пустых зон"))
        self.radioRoad.setText(_translate("PreProcessWindow", "Задание проходов и проездов"))
        self.radioSubArea.setText(_translate("PreProcessWindow", "Задание подпространств"))
        self.label_2.setText(_translate("PreProcessWindow", "Раздел сводки"))
        self.SiteAreaLabel.setText(_translate("PreProcessWindow", "Суммарная площадь участков"))
        self.FCLAreaLabel.setText(_translate("PreProcessWindow", "Площадь пространства:"))
        self.FCL_Var_label.setText(_translate("PreProcessWindow", " "))
        self.SiteAreaLabel_2.setText(_translate("PreProcessWindow", " "))
        self.label_3.setText(_translate("PreProcessWindow", "Участки для размещения"))
        self.label_4.setText(_translate("PreProcessWindow", "Доступные подпространства"))


def change_coord(x1, y1, w1, h1):
    x = x1
    y = y1
    w = w1
    h = h1
    if w < 0 and h > 0:
        x = x + w
    elif w > 0 and h < 0:
        y = y + h
    elif w < 0 and h < 0:
        x = x + w
        y = y + h
    w, h = abs(w), abs(h)
    return x, y, w, h


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    PreProcessWindow = QtWidgets.QWidget()
    ui = Ui_PreProcessWindow()
    ui.setupUi(PreProcessWindow)
    PreProcessWindow.show()
    sys.exit(app.exec_())
