# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\tarou\Documents\Pycharm Projects\Genetic_Layout\PreProcessWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import course, os
from PyQt5.QtWidgets import QTableWidgetItem, QTableView, QMessageBox
from PyQt5.QtCore import Qt

class Ui_PreProcessWindow(object):
    def setupUi(self, PreProcessWindow):
        PreProcessWindow.setObjectName("PreProcessWindow")
        PreProcessWindow.resize(1055, 798)
        self.SIte_Table = QtWidgets.QTableWidget(PreProcessWindow)
        self.SIte_Table.setGeometry(QtCore.QRect(40, 490, 441, 261))
        self.SIte_Table.setObjectName("SIte_Table")
        self.SIte_Table.setColumnCount(0)
        self.SIte_Table.setRowCount(0)
        self.label = QtWidgets.QLabel(PreProcessWindow)
        self.label.setGeometry(QtCore.QRect(580, 30, 421, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label.setFont(font)
        self.label.setText("")
        self.label.setObjectName("label")
        self.verticalScrollBar = QtWidgets.QScrollBar(PreProcessWindow)
        self.verticalScrollBar.setGeometry(QtCore.QRect(990, 490, 21, 261))
        self.verticalScrollBar.setOrientation(QtCore.Qt.Vertical)
        self.verticalScrollBar.setObjectName("verticalScrollBar")
        self.tableWidget_3 = QtWidgets.QTableWidget(PreProcessWindow)
        self.tableWidget_3.setGeometry(QtCore.QRect(460, 20, 361, 331))
        self.tableWidget_3.setObjectName("tableWidget_3")
        self.tableWidget_3.setColumnCount(0)
        self.tableWidget_3.setRowCount(0)
        self.label_2 = QtWidgets.QLabel(PreProcessWindow)
        self.label_2.setGeometry(QtCore.QRect(450, 410, 151, 21))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.Areas_Table = QtWidgets.QTableWidget(PreProcessWindow)
        self.Areas_Table.setGeometry(QtCore.QRect(540, 490, 441, 261))
        self.Areas_Table.setObjectName("Areas_Table")
        self.Areas_Table.setColumnCount(0)
        self.Areas_Table.setRowCount(0)
        self.verticalScrollBar_2 = QtWidgets.QScrollBar(PreProcessWindow)
        self.verticalScrollBar_2.setGeometry(QtCore.QRect(490, 490, 21, 261))
        self.verticalScrollBar_2.setOrientation(QtCore.Qt.Vertical)
        self.verticalScrollBar_2.setObjectName("verticalScrollBar_2")
        self.label_3 = QtWidgets.QLabel(PreProcessWindow)
        self.label_3.setGeometry(QtCore.QRect(160, 450, 211, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(PreProcessWindow)
        self.label_4.setGeometry(QtCore.QRect(660, 430, 231, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.ExcelImportBtn = QtWidgets.QPushButton(PreProcessWindow)
        self.ExcelImportBtn.setGeometry(QtCore.QRect(20, 20, 211, 41))
        self.ExcelImportBtn.setObjectName("ExcelImportBtn")
        self.checkBox_spaceedit = QtWidgets.QCheckBox(PreProcessWindow)
        self.checkBox_spaceedit.setGeometry(QtCore.QRect(250, 30, 191, 17))
        self.checkBox_spaceedit.setObjectName("checkBox_spaceedit")
        self.radioRoad = QtWidgets.QRadioButton(PreProcessWindow)
        self.radioRoad.setGeometry(QtCore.QRect(110, 100, 191, 17))
        self.radioRoad.setObjectName("radioRoad")
        self.radioVoid = QtWidgets.QRadioButton(PreProcessWindow)
        self.radioVoid.setGeometry(QtCore.QRect(110, 150, 191, 17))
        self.radioVoid.setObjectName("radioVoid")
        self.radioSubArea = QtWidgets.QRadioButton(PreProcessWindow)
        self.radioSubArea.setGeometry(QtCore.QRect(110, 190, 181, 17))
        self.radioSubArea.setObjectName("radioSubArea")
        self.DeleteAreasBtn = QtWidgets.QPushButton(PreProcessWindow)
        self.DeleteAreasBtn.setGeometry(QtCore.QRect(840, 180, 171, 23))
        self.DeleteAreasBtn.setObjectName("DeleteAreasBtn")
        self.PreExitBtn = QtWidgets.QPushButton(PreProcessWindow)
        self.PreExitBtn.setGeometry(QtCore.QRect(100, 330, 181, 23))
        self.PreExitBtn.setObjectName("PreExitBtn")

        self.retranslateUi(PreProcessWindow)
        QtCore.QMetaObject.connectSlotsByName(PreProcessWindow)

        '''
                                   МОЙ БЛОК НИЖЕ КОПИРОВАТЬ ПЕРЕД executesecond.bat 
                                   '''
        self.PreExitBtn.setEnabled(False)
        self.tableWidget_3.setMouseTracking(True)
        self.ExcelImportBtn.clicked.connect(self.xlsx_open_dialog)
        self.checkBox_spaceedit.isChecked()
        self.PreExitBtn.clicked.connect(self.linkAreaExit)
        self.SIte_Table.itemEntered.connect(self.refresh_combobox)
        self.Areas_Table.cellPressed.connect(self.deleteRow)
        self.SIte_Table.setMouseTracking(True)

        # self.PreExitBtn.clicked.connect(self.)

        # Хранение данных
        self.rect_edit = {}
        self.linklist = []
        self.Passedchecks = False
        self.FCL_rect = ''

    def xlsx_open_dialog(self):
        fname = QtWidgets.QFileDialog.getOpenFileName()
        if not fname[0] == '':
            self.FCL_Ref = self.generate_initial(fname[0])
            self.pastexlsxTable()
        self.PreExitBtn.setEnabled(True)




    def pastexlsxTable(self):
        self.SIte_Table.setColumnCount(3)  # Устанавливаем три колонки
        self.SIte_Table.setRowCount(len(self.FCL_Ref.Site_list))  # и одну строку в таблице

        # Устанавливаем заголовки таблицы
        self.SIte_Table.setHorizontalHeaderLabels(["Название", "Площадь", 'Принадлежность'])

        # Устанавливаем всплывающие подсказки на заголовки
        # self.SIte_Table.horizontalHeaderItem(0).setToolTip("Column 1 ")
        # self.SIte_Table.horizontalHeaderItem(1).setToolTip("Column 2 ")
        # self.SIte_Table.horizontalHeaderItem(2).setToolTip("Column 3 ")

        # Устанавливаем выравнивание на заголовки
        self.SIte_Table.horizontalHeaderItem(0).setTextAlignment(Qt.AlignCenter)
        self.SIte_Table.horizontalHeaderItem(1).setTextAlignment(Qt.AlignCenter)
        self.SIte_Table.horizontalHeaderItem(2).setTextAlignment(Qt.AlignCenter)

        # заполняем первую строку
        for i in range(len(self.FCL_Ref.Site_list)):
            self.SIte_Table.setItem(i, 0, QTableWidgetItem(str(self.FCL_Ref.area_sitenamelist[i])))
            self.SIte_Table.setItem(i, 1, QTableWidgetItem(str(self.FCL_Ref.area_sitespacelist[i])))
            combo = QtWidgets.QComboBox()
            combo.addItem('Default')
            self.SIte_Table.setCellWidget(i, 2, combo)

        # делаем ресайз колонок по содержимому
        self.SIte_Table.resizeColumnsToContents()

    def pastAreaTable(self, widget, info, cols=3, rows=10):  # не доделано заполнение
        widget.setColumnCount(cols)  # Устанавливаем три колонки
        widget.setRowCount(rows)  # и одну строку в таблице
        widget.setHorizontalHeaderLabels(["Название", "Площадь", 'Тип пространства'])

        widget.horizontalHeaderItem(0).setTextAlignment(Qt.AlignCenter)
        widget.horizontalHeaderItem(1).setTextAlignment(Qt.AlignCenter)
        widget.horizontalHeaderItem(2).setTextAlignment(Qt.AlignCenter)

        for i in range(len(info)):
            widget.setItem(i, 0, QTableWidgetItem(str(info[f'{i}'][1])))
            width = info[f'{i}'][0].width()
            height = info[f'{i}'][0].height()
            S = round(abs(width * height), 2)
            widget.setItem(i, 1, QTableWidgetItem(str(S)))
            widget.setItem(i, 2, QTableWidgetItem(str(info[f'{i}'][2])))

            widget.resizeColumnsToContents()

        # def completePre(self):
        #     pass

    def deleteRow(self, row):
        self.Areas_Table.removeRow(row)
        del self.rect_edit[f'{row}']



    def linkAreaExit(self):
        linklist = []
        qrect = ''
        counter = 0
        x,y,w,h = 0,0,0,0
        for i in range(self.SIte_Table.rowCount()):
            if len(self.rect_edit) != 0:
                for j in range(len(self.rect_edit)):
                    if self.rect_edit[f'{j}'][1] == self.SIte_Table.cellWidget(i,2).currentText():
                        qrect = self.rect_edit[f'{j}'][0]
                        x, y, w, h = qrect.x(), qrect.y(), qrect.width(), qrect.height()
                        x, y, w,h = change_coord(x,y, w, h)
                        counter += 1
                if counter != 0:
                    linklist.append(course.SubArea(x, y, w, h, self.SIte_Table.cellWidget(i,2).currentText()))
                    counter = 0
                else:
                    linklist.append(self.FCL_Ref.fcl)
            else:
                linklist.append(self.FCL_Ref.fcl)

        self.Passedchecks = self.enough_space(self.FCL_Ref)
        self.linklist = linklist






    def refresh_combobox(self, item):
        if self.Areas_Table.rowCount() != 0:
            for j in range(self.SIte_Table.rowCount()):
                self.SIte_Table.cellWidget(j, 2).clear()
                self.SIte_Table.cellWidget(j, 2).addItem('Default')
                for i in range(self.Areas_Table.rowCount()):
                    if self.Areas_Table.item(i, 2).text() == "Подпространство":
                        self.SIte_Table.cellWidget(j, 2).addItem(self.Areas_Table.item(i, 0).text())

    def generate_initial(self, path):
        individ = course.Individual()
        individ.excelparser(path)
        individ.createSites()
        return individ

    def enough_space(self, FCL_ref):
        Square1 = FCL_ref.fcl.width() * FCL_ref.fcl.height()
        squaresumSites = 0
        passed = False
        mbox = QMessageBox()
        for i in range(len(FCL_ref.area_sitespacelist)):
            squaresumSites += FCL_ref.area_sitespacelist[i]
        Square2 = 0
        if self.Areas_Table.rowCount() != 0:
            for i in range(self.Areas_Table.rowCount()):
                Square2 += float(self.Areas_Table.item(i, 1).text())

        if self.SIte_Table.rowCount() != 0 and self.Areas_Table.rowCount() != 0:
            for i in range(len(FCL_ref.area_sitespacelist)):
                for j in range(self.Areas_Table.rowCount()):
                    if self.SIte_Table.cellWidget(i, 2).currentText() != 'Default' and self.Areas_Table.item(j,0).text() == self.SIte_Table.cellWidget(i, 2).currentText():
                        square1 = float(self.Areas_Table.item(j, 1).text())
                        square2 = float(self.SIte_Table.item(i, 1).text())
                        #print(f'----{square1}-------{square2}')
                        if square2 < square1:
                            passed = True
                        else:
                            mbox.setText('Площадь размещаемых участков превышает площадь подпространства')
                            mbox.exec_()
                            break
                    else:
                        passed = True

        if Square1 - Square2 + self.intercept_criteria() > squaresumSites * 1.1 and passed:
            return True
        else:
            mbox.setText('Участки не вписываются в заданную конфигурацию цеха')
            mbox.exec_()
            return False

    def intercept_criteria(self):  # здесь определяем, что прямоугольники внутри Sub_Area
        intercept = 0
        if self.Areas_Table.rowCount() != 0:
            for i in range(self.Areas_Table.rowCount()):
                for j in range(self.Areas_Table.rowCount()):
                    if i != j:
                        x1 = self.rect_edit[f'{j}'][0].x()
                        y1 = self.rect_edit[f'{j}'][0].y()
                        width1 = self.rect_edit[f'{j}'][0].width()
                        height1 = self.rect_edit[f'{j}'][0].height()
                        x1, y1, width1, height1 = change_coord(x1, y1, width1, height1)
                        x2 = x1 + width1
                        y2 = y1 + height1

                        x3 = self.rect_edit[f'{i}'][0].x()
                        y3 = self.rect_edit[f'{i}'][0].x()
                        width = self.rect_edit[f'{i}'][0].width()
                        height = self.rect_edit[f'{i}'][0].height()
                        x3, y3, width, height = change_coord(x3, y3, width, height)

                        x4 = x3 + width
                        y4 = y3 + height

                        left = max(x1, x3)
                        top = min(y2, y4)
                        right = min(x2, x4)
                        bottom = max(y1, y3)
                        width = right - left
                        height = top - bottom
                        if (width < 0 or height < 0):
                            intercept += width * height

        return intercept

    def retranslateUi(self, PreProcessWindow):
        _translate = QtCore.QCoreApplication.translate
        PreProcessWindow.setWindowTitle(_translate("PreProcessWindow", "Form"))
        self.label_2.setText(_translate("PreProcessWindow", "Раздел сводки"))
        self.label_3.setText(_translate("PreProcessWindow", "Участки для размещения"))
        self.label_4.setText(_translate("PreProcessWindow", "Доступные подпространства"))
        self.ExcelImportBtn.setText(_translate("PreProcessWindow", "Импорт данных из Excel"))
        self.checkBox_spaceedit.setText(_translate("PreProcessWindow", "Режим добавления геометрии"))
        self.radioRoad.setText(_translate("PreProcessWindow", "Задание проходов и проездов"))
        self.radioVoid.setText(_translate("PreProcessWindow", "Задание пустых зон"))
        self.radioSubArea.setText(_translate("PreProcessWindow", "Задание подпространств"))
        self.DeleteAreasBtn.setText(_translate("PreProcessWindow", "Удалить выделенный участок"))
        self.PreExitBtn.setText(_translate("PreProcessWindow", "Завершение"))

def change_coord(x1, y1, w1, h1):
    x = x1
    y = y1
    w = w1
    h = h1
    if w < 0 and h > 0:
        x = x + w
    elif w > 0 and h < 0:
        y = y + h
    elif w < 0 and h < 0:
        x = x + w
        y = y + h
    w, h = abs(w), abs(h)
    return x, y, w, h


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    PreProcessWindow = QtWidgets.QWidget()
    ui = Ui_PreProcessWindow()
    ui.setupUi(PreProcessWindow)
    PreProcessWindow.show()
    sys.exit(app.exec_())
